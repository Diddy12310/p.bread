{"remainingRequest":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aidan\\Dev\\paradigm-vue\\src\\views\\Flamechat.vue?vue&type=script&defer=true&lang=js&","dependencies":[{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\src\\views\\Flamechat.vue","mtime":1546005687502},{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n'use strict'; // Signs-in Friendly Chat.\n\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction signIn() {\n  // Sign in Firebase using popup auth and Google as the identity provider.\n  var provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().signInWithPopup(provider);\n} // Signs-out of Friendly Chat.\n\n\nfunction signOut() {\n  // Sign out of Firebase.\n  firebase.auth().signOut();\n} // Initiate firebase auth.\n\n\nfunction initFirebaseAuth() {\n  // Listen to auth state changes.\n  firebase.auth().onAuthStateChanged(authStateObserver);\n} // Returns the signed-in user's profile Pic URL.\n\n\nfunction getProfilePicUrl() {\n  return firebase.auth().currentUser.photoURL || '/assets/profile_placeholder.png';\n} // Returns the signed-in user's display name.\n\n\nfunction getUserName() {\n  return firebase.auth().currentUser.displayName;\n} // Returns true if a user is signed-in.\n\n\nfunction isUserSignedIn() {\n  return !!firebase.auth().currentUser;\n} // Loads chat messages history and listens for upcoming ones.\n\n\nfunction loadMessages() {\n  // Loads the last 12 messages and listen for new ones.\n  var callback = function callback(snap) {\n    var data = snap.val();\n    displayMessage(snap.key, data.name, data.text, data.profilePicUrl, data.imageUrl, data.date, data.time);\n  };\n\n  firebase.database().ref('/messages/').on('child_added', callback);\n  firebase.database().ref('/messages/').on('child_changed', callback);\n} // Saves a new message on the Firebase DB.\n\n\nfunction saveMessage(messageText) {\n  // Add a new message entry to the Firebase database.\n  var date = new Date(Date.now());\n  return firebase.database().ref('/messages/').push({\n    name: getUserName(),\n    text: messageText,\n    profilePicUrl: getProfilePicUrl(),\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString()\n  }).catch(function (error) {\n    console.error('Error writing new message to Firebase Database', error);\n  });\n} // Saves a new message containing an image in Firebase.\n// This first saves the image in Firebase storage.\n\n\nfunction saveImageMessage(file) {\n  // 1 - We add a message with a loading icon that will get updated with the shared image.\n  var date = new Date(Date.now());\n  firebase.database().ref('/messages/').push({\n    name: getUserName(),\n    imageUrl: LOADING_IMAGE_URL,\n    profilePicUrl: getProfilePicUrl(),\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString()\n  }).then(function (messageRef) {\n    // 2 - Upload the image to Cloud Storage.\n    var filePath = firebase.auth().currentUser.uid + '/' + messageRef.key + '/' + file.name;\n    return firebase.storage().ref(filePath).put(file).then(function (fileSnapshot) {\n      // 3 - Generate a public URL for the file.\n      return fileSnapshot.ref.getDownloadURL().then(function (url) {\n        // 4 - Update the chat message placeholder with the imageâ€™s URL.\n        return messageRef.update({\n          imageUrl: url,\n          storageUri: fileSnapshot.metadata.fullPath\n        });\n      });\n    });\n  }).catch(function (error) {\n    console.error('There was an error uploading a file to Cloud Storage:', error);\n  });\n} // Saves the messaging device token to the datastore.\n\n\nfunction saveMessagingDeviceToken() {\n  firebase.messaging().getToken().then(function (currentToken) {\n    if (currentToken) {\n      console.log('Got FCM device token:', currentToken); // Saving the Device Token to the datastore.\n\n      firebase.database().ref('/fcmTokens').child(currentToken).set(firebase.auth().currentUser.uid);\n    } else {\n      // Need to request permissions to show notifications.\n      requestNotificationsPermissions();\n    }\n  }).catch(function (error) {\n    console.error('Unable to get messaging token.', error);\n  });\n} // Requests permissions to show notifications.\n\n\nfunction requestNotificationsPermissions() {\n  console.log('Requesting notifications permission...');\n  firebase.messaging().requestPermission().then(function () {\n    // Notification permission granted.\n    saveMessagingDeviceToken();\n  }).catch(function (error) {\n    console.error('Unable to get permission to notify.', error);\n  });\n} // Triggered when a file is selected via the media picker.\n\n\nfunction onMediaFileSelected(event) {\n  event.preventDefault();\n  var file = event.target.files[0]; // Clear the selection in the file picker input.\n\n  imageFormElement.reset(); // Check if the file is an image.\n\n  if (!file.type.match('image.*')) {\n    var data = {\n      message: 'You can only send images',\n      timeout: 2000\n    };\n    signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\n    return;\n  } // Check if the user is signed-in\n\n\n  if (checkSignedInWithMessage()) {\n    saveImageMessage(file);\n  }\n} // Triggered when the send new message form is submitted.\n\n\nfunction onMessageFormSubmit(e) {\n  e.preventDefault(); // Check that the user entered a message and is signed in.\n\n  if (messageInputElement.value && checkSignedInWithMessage()) {\n    saveMessage(messageInputElement.value).then(function () {\n      // Clear message text field and re-enable the SEND button.\n      resetMaterialTextfield(messageInputElement);\n      toggleButton();\n    });\n  }\n} // Triggers when the auth state change for instance when the user signs-in or signs-out.\n\n\nfunction authStateObserver(user) {\n  if (user) {\n    // User is signed in!\n    // Get the signed-in user's profile pic and name.\n    var profilePicUrl = getProfilePicUrl();\n    var userName = getUserName(); // Set the user's profile pic and name.\n\n    userPicElement.style.backgroundImage = 'url(' + profilePicUrl + ')';\n    userNameElement.textContent = userName; // Show user's profile and sign-out button.\n\n    userNameElement.removeAttribute('hidden');\n    userPicElement.removeAttribute('hidden');\n    signOutButtonElement.removeAttribute('hidden'); // Hide sign-in button.\n\n    signInButtonElement.setAttribute('hidden', 'true'); // We save the Firebase Messaging Device token and enable notifications.\n\n    saveMessagingDeviceToken();\n  } else {\n    // User is signed out!\n    // Hide user's profile and sign-out button.\n    userNameElement.setAttribute('hidden', 'true');\n    userPicElement.setAttribute('hidden', 'true');\n    signOutButtonElement.setAttribute('hidden', 'true'); // Show sign-in button.\n\n    signInButtonElement.removeAttribute('hidden');\n  }\n} // Returns true if user is signed-in. Otherwise false and displays a message.\n\n\nfunction checkSignedInWithMessage() {\n  // Return true if the user is signed in Firebase\n  if (isUserSignedIn()) {\n    return true;\n  } // Display a message to the user using a Toast.\n\n\n  var data = {\n    message: 'You must sign-in first',\n    timeout: 2000\n  };\n  signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\n  return false;\n} // Resets the given MaterialTextField.\n\n\nfunction resetMaterialTextfield(element) {\n  element.value = '';\n  element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\n} // Template for messages.\n\n\nvar MESSAGE_TEMPLATE = '<div class=\"message-container\">' + '<div class=\"spacing\"><div class=\"pic\"></div></div>' + '<div class=\"message\"></div>' + '<div class=\"nameDateTime\"></div>';\n'</div>'; // Adds a size to Google Profile pics URLs.\n\nfunction addSizeToGoogleProfilePic(url) {\n  if (url.indexOf('googleusercontent.com') !== -1 && url.indexOf('?') === -1) {\n    return url + '?sz=150';\n  }\n\n  return url;\n} // A loading image URL.\n\n\nvar LOADING_IMAGE_URL = './assets/loader.gif'; // Displays a Message in the UI.\n\nfunction displayMessage(key, name, text, picUrl, imageUrl, date, time) {\n  var div = document.getElementById(key); // If an element for that message does not exists yet we create it.\n\n  if (!div) {\n    var container = document.createElement('div');\n    container.innerHTML = MESSAGE_TEMPLATE;\n    div = container.firstChild;\n    div.setAttribute('id', key);\n    messageListElement.appendChild(div);\n  }\n\n  if (picUrl) {\n    div.querySelector('.pic').style.backgroundImage = 'url(' + addSizeToGoogleProfilePic(picUrl) + ')';\n  }\n\n  div.querySelector('.nameDateTime').textContent = name + \" sent this on \" + date + \" at \" + time;\n  var messageElement = div.querySelector('.message');\n\n  if (text) {\n    // If the message is text.\n    messageElement.textContent = text; // Replace all line breaks by <br>.\n\n    messageElement.innerHTML = messageElement.innerHTML.replace(/\\n/g, '<br>');\n  } else if (imageUrl) {\n    // If the message is an image.\n    var image = document.createElement('img');\n    image.addEventListener('load', function () {\n      messageListElement.scrollTop = messageListElement.scrollHeight;\n    });\n    image.src = imageUrl + '&' + new Date().getTime();\n    messageElement.innerHTML = '';\n    messageElement.appendChild(image);\n  } // Show the card fading-in and scroll to view the new message.\n\n\n  setTimeout(function () {\n    div.classList.add('visible');\n  }, 1);\n  messageListElement.scrollTop = messageListElement.scrollHeight;\n  messageInputElement.focus();\n} // Enables or disables the submit button depending on the values of the input\n// fields.\n\n\nfunction toggleButton() {\n  if (messageInputElement.value) {\n    submitButtonElement.removeAttribute('disabled');\n  } else {\n    submitButtonElement.setAttribute('disabled', 'true');\n  }\n} // Checks that the Firebase SDK has been correctly setup and configured.\n\n\nfunction checkSetup() {\n  if (!window.firebase || !(firebase.app instanceof Function) || !firebase.app().options) {\n    window.alert('You have not configured and imported the Firebase SDK. ' + 'Make sure you go through the codelab setup instructions and make ' + 'sure you are running the codelab using `firebase serve`');\n  }\n} // Checks that Firebase has been imported.\n\n\ncheckSetup(); // Shortcuts to DOM Elements.\n\nvar messageListElement = document.getElementById('messages');\nvar messageFormElement = document.getElementById('message-form');\nvar messageInputElement = document.getElementById('message');\nvar submitButtonElement = document.getElementById('submit');\nvar imageButtonElement = document.getElementById('submitImage');\nvar imageFormElement = document.getElementById('image-form');\nvar mediaCaptureElement = document.getElementById('mediaCapture');\nvar userPicElement = document.getElementById('user-pic');\nvar userNameElement = document.getElementById('user-name');\nvar signInButtonElement = document.getElementById('sign-in');\nvar signOutButtonElement = document.getElementById('sign-out');\nvar signInSnackbarElement = document.getElementById('must-signin-snackbar'); // Saves message on form submit.\n\nmessageFormElement.addEventListener('submit', onMessageFormSubmit);\nsignOutButtonElement.addEventListener('click', signOut);\nsignInButtonElement.addEventListener('click', signIn); // Toggle for the button.\n\nmessageInputElement.addEventListener('keyup', toggleButton);\nmessageInputElement.addEventListener('change', toggleButton); // Events for image upload.\n\nimageButtonElement.addEventListener('click', function (e) {\n  e.preventDefault();\n  mediaCaptureElement.click();\n});\nmediaCaptureElement.addEventListener('change', onMediaFileSelected); // initialize Firebase\n\ninitFirebaseAuth(); // We load currently existing chat messages and listen to new ones.\n\nloadMessages();",{"version":3,"sources":["Flamechat.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"about\">\n    <h1>This is an about page</h1>\n  </div>\n</template>\n\n<script defer>\n'use strict';\n\n// Signs-in Friendly Chat.\nfunction signIn() {\n  // Sign in Firebase using popup auth and Google as the identity provider.\n  var provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().signInWithPopup(provider);\n}\n\n// Signs-out of Friendly Chat.\nfunction signOut() {\n  // Sign out of Firebase.\n  firebase.auth().signOut();\n}\n\n// Initiate firebase auth.\nfunction initFirebaseAuth() {\n  // Listen to auth state changes.\n  firebase.auth().onAuthStateChanged(authStateObserver);\n}\n\n// Returns the signed-in user's profile Pic URL.\nfunction getProfilePicUrl() {\n  return firebase.auth().currentUser.photoURL || '/assets/profile_placeholder.png';\n}\n\n// Returns the signed-in user's display name.\nfunction getUserName() {\n  return firebase.auth().currentUser.displayName;\n}\n\n// Returns true if a user is signed-in.\nfunction isUserSignedIn() {\n  return !!firebase.auth().currentUser;\n}\n\n// Loads chat messages history and listens for upcoming ones.\nfunction loadMessages() {\n  // Loads the last 12 messages and listen for new ones.\n  var callback = function(snap) {\n    var data = snap.val();\n    displayMessage(snap.key, data.name, data.text, data.profilePicUrl, data.imageUrl, data.date, data.time);\n  };\n\n  firebase.database().ref('/messages/').on('child_added', callback);\n  firebase.database().ref('/messages/').on('child_changed', callback);\n}\n\n// Saves a new message on the Firebase DB.\nfunction saveMessage(messageText) {\n  // Add a new message entry to the Firebase database.\n  var date = new Date(Date.now())\n  return firebase.database().ref('/messages/').push({\n    name: getUserName(),\n    text: messageText,\n    profilePicUrl: getProfilePicUrl(),\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString()\n  }).catch(function(error) {\n    console.error('Error writing new message to Firebase Database', error);\n  });\n}\n\n// Saves a new message containing an image in Firebase.\n// This first saves the image in Firebase storage.\nfunction saveImageMessage(file) {\n  // 1 - We add a message with a loading icon that will get updated with the shared image.\n  var date = new Date(Date.now())\n  firebase.database().ref('/messages/').push({\n    name: getUserName(),\n    imageUrl: LOADING_IMAGE_URL,\n    profilePicUrl: getProfilePicUrl(),\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString()\n  }).then(function(messageRef) {\n    // 2 - Upload the image to Cloud Storage.\n    var filePath = firebase.auth().currentUser.uid + '/' + messageRef.key + '/' + file.name;\n    return firebase.storage().ref(filePath).put(file).then(function(fileSnapshot) {\n      // 3 - Generate a public URL for the file.\n      return fileSnapshot.ref.getDownloadURL().then((url) => {\n        // 4 - Update the chat message placeholder with the imageâ€™s URL.\n        return messageRef.update({\n          imageUrl: url,\n          storageUri: fileSnapshot.metadata.fullPath\n        });\n      });\n    });\n  }).catch(function(error) {\n    console.error('There was an error uploading a file to Cloud Storage:', error);\n  });\n}\n\n// Saves the messaging device token to the datastore.\nfunction saveMessagingDeviceToken() {\n  firebase.messaging().getToken().then(function(currentToken) {\n    if (currentToken) {\n      console.log('Got FCM device token:', currentToken);\n      // Saving the Device Token to the datastore.\n      firebase.database().ref('/fcmTokens').child(currentToken)\n          .set(firebase.auth().currentUser.uid);\n    } else {\n      // Need to request permissions to show notifications.\n      requestNotificationsPermissions();\n    }\n  }).catch(function(error){\n    console.error('Unable to get messaging token.', error);\n  });\n}\n\n// Requests permissions to show notifications.\nfunction requestNotificationsPermissions() {\n  console.log('Requesting notifications permission...');\n  firebase.messaging().requestPermission().then(function() {\n    // Notification permission granted.\n    saveMessagingDeviceToken();\n  }).catch(function(error) {\n    console.error('Unable to get permission to notify.', error);\n  });\n}\n\n// Triggered when a file is selected via the media picker.\nfunction onMediaFileSelected(event) {\n  event.preventDefault();\n  var file = event.target.files[0];\n\n  // Clear the selection in the file picker input.\n  imageFormElement.reset();\n\n  // Check if the file is an image.\n  if (!file.type.match('image.*')) {\n    var data = {\n      message: 'You can only send images',\n      timeout: 2000\n    };\n    signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\n    return;\n  }\n  // Check if the user is signed-in\n  if (checkSignedInWithMessage()) {\n    saveImageMessage(file);\n  }\n}\n\n// Triggered when the send new message form is submitted.\nfunction onMessageFormSubmit(e) {\n  e.preventDefault();\n  // Check that the user entered a message and is signed in.\n  if (messageInputElement.value && checkSignedInWithMessage()) {\n    saveMessage(messageInputElement.value).then(function() {\n      // Clear message text field and re-enable the SEND button.\n      resetMaterialTextfield(messageInputElement);\n      toggleButton();\n    });\n  }\n}\n\n// Triggers when the auth state change for instance when the user signs-in or signs-out.\nfunction authStateObserver(user) {\n  if (user) { // User is signed in!\n    // Get the signed-in user's profile pic and name.\n    var profilePicUrl = getProfilePicUrl();\n    var userName = getUserName();\n\n    // Set the user's profile pic and name.\n    userPicElement.style.backgroundImage = 'url(' + profilePicUrl + ')';\n    userNameElement.textContent = userName;\n\n    // Show user's profile and sign-out button.\n    userNameElement.removeAttribute('hidden');\n    userPicElement.removeAttribute('hidden');\n    signOutButtonElement.removeAttribute('hidden');\n\n    // Hide sign-in button.\n    signInButtonElement.setAttribute('hidden', 'true');\n\n    // We save the Firebase Messaging Device token and enable notifications.\n    saveMessagingDeviceToken();\n  } else { // User is signed out!\n    // Hide user's profile and sign-out button.\n    userNameElement.setAttribute('hidden', 'true');\n    userPicElement.setAttribute('hidden', 'true');\n    signOutButtonElement.setAttribute('hidden', 'true');\n\n    // Show sign-in button.\n    signInButtonElement.removeAttribute('hidden');\n  }\n}\n\n// Returns true if user is signed-in. Otherwise false and displays a message.\nfunction checkSignedInWithMessage() {\n  // Return true if the user is signed in Firebase\n  if (isUserSignedIn()) {\n    return true;\n  }\n\n  // Display a message to the user using a Toast.\n  var data = {\n    message: 'You must sign-in first',\n    timeout: 2000\n  };\n  signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\n  return false;\n}\n\n// Resets the given MaterialTextField.\nfunction resetMaterialTextfield(element) {\n  element.value = '';\n  element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\n}\n\n// Template for messages.\nvar MESSAGE_TEMPLATE =\n    '<div class=\"message-container\">' +\n      '<div class=\"spacing\"><div class=\"pic\"></div></div>' +\n      '<div class=\"message\"></div>' +\n      '<div class=\"nameDateTime\"></div>'\n    '</div>';\n\n// Adds a size to Google Profile pics URLs.\nfunction addSizeToGoogleProfilePic(url) {\n  if (url.indexOf('googleusercontent.com') !== -1 && url.indexOf('?') === -1) {\n    return url + '?sz=150';\n  }\n  return url;\n}\n\n// A loading image URL.\nvar LOADING_IMAGE_URL = './assets/loader.gif';\n\n// Displays a Message in the UI.\nfunction displayMessage(key, name, text, picUrl, imageUrl, date, time) {\n  var div = document.getElementById(key);\n  // If an element for that message does not exists yet we create it.\n  if (!div) {\n    var container = document.createElement('div');\n    container.innerHTML = MESSAGE_TEMPLATE;\n    div = container.firstChild;\n    div.setAttribute('id', key);\n    messageListElement.appendChild(div);\n  }\n  if (picUrl) {\n    div.querySelector('.pic').style.backgroundImage = 'url(' + addSizeToGoogleProfilePic(picUrl) + ')';\n  }\n  div.querySelector('.nameDateTime').textContent = name + \" sent this on \" + date + \" at \" + time;\n  var messageElement = div.querySelector('.message');\n  if (text) { // If the message is text.\n    messageElement.textContent = text;\n    // Replace all line breaks by <br>.\n    messageElement.innerHTML = messageElement.innerHTML.replace(/\\n/g, '<br>');\n  } else if (imageUrl) { // If the message is an image.\n    var image = document.createElement('img');\n    image.addEventListener('load', function() {\n      messageListElement.scrollTop = messageListElement.scrollHeight;\n    });\n    image.src = imageUrl + '&' + new Date().getTime();\n    messageElement.innerHTML = '';\n    messageElement.appendChild(image);\n  }\n  // Show the card fading-in and scroll to view the new message.\n  setTimeout(function() {div.classList.add('visible')}, 1);\n  messageListElement.scrollTop = messageListElement.scrollHeight;\n  messageInputElement.focus();\n}\n\n// Enables or disables the submit button depending on the values of the input\n// fields.\nfunction toggleButton() {\n  if (messageInputElement.value) {\n    submitButtonElement.removeAttribute('disabled');\n  } else {\n    submitButtonElement.setAttribute('disabled', 'true');\n  }\n}\n\n// Checks that the Firebase SDK has been correctly setup and configured.\nfunction checkSetup() {\n  if (!window.firebase || !(firebase.app instanceof Function) || !firebase.app().options) {\n    window.alert('You have not configured and imported the Firebase SDK. ' +\n        'Make sure you go through the codelab setup instructions and make ' +\n        'sure you are running the codelab using `firebase serve`');\n  }\n}\n\n// Checks that Firebase has been imported.\ncheckSetup();\n\n// Shortcuts to DOM Elements.\nvar messageListElement = document.getElementById('messages');\nvar messageFormElement = document.getElementById('message-form');\nvar messageInputElement = document.getElementById('message');\nvar submitButtonElement = document.getElementById('submit');\nvar imageButtonElement = document.getElementById('submitImage');\nvar imageFormElement = document.getElementById('image-form');\nvar mediaCaptureElement = document.getElementById('mediaCapture');\nvar userPicElement = document.getElementById('user-pic');\nvar userNameElement = document.getElementById('user-name');\nvar signInButtonElement = document.getElementById('sign-in');\nvar signOutButtonElement = document.getElementById('sign-out');\nvar signInSnackbarElement = document.getElementById('must-signin-snackbar');\n\n// Saves message on form submit.\nmessageFormElement.addEventListener('submit', onMessageFormSubmit);\nsignOutButtonElement.addEventListener('click', signOut);\nsignInButtonElement.addEventListener('click', signIn);\n\n// Toggle for the button.\nmessageInputElement.addEventListener('keyup', toggleButton);\nmessageInputElement.addEventListener('change', toggleButton);\n\n// Events for image upload.\nimageButtonElement.addEventListener('click', function(e) {\n  e.preventDefault();\n  mediaCaptureElement.click();\n});\nmediaCaptureElement.addEventListener('change', onMediaFileSelected);\n\n// initialize Firebase\ninitFirebaseAuth();\n\n// We load currently existing chat messages and listen to new ones.\nloadMessages();\n</script>"],"sourceRoot":"src\\views"}]}