{"remainingRequest":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\aidan\\Dev\\paradigm-vue\\src\\views\\chat.js?vue&type=script&defer=true&lang=js&","dependencies":[{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\src\\views\\chat.js","mtime":1546963905944},{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\aidan\\Dev\\paradigm-vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["'use strict'; // Signs-in Friendly Chat.\n\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction signIn() {\n  // Sign in Firebase using popup auth and Google as the identity provider.\n  var provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().signInWithPopup(provider);\n} // Signs-out of Friendly Chat.\n\n\nfunction signOut() {\n  // Sign out of Firebase.\n  firebase.auth().signOut();\n} // Initiate firebase auth.\n\n\nfunction initFirebaseAuth() {\n  // Listen to auth state changes.\n  firebase.auth().onAuthStateChanged(authStateObserver);\n} // Returns the signed-in user's profile Pic URL.\n\n\nfunction getProfilePicUrl() {\n  return firebase.auth().currentUser.photoURL || '/assets/profile_placeholder.png';\n} // Returns the signed-in user's display name.\n\n\nfunction getUserName() {\n  return firebase.auth().currentUser.displayName;\n} // Returns true if a user is signed-in.\n\n\nfunction isUserSignedIn() {\n  return !!firebase.auth().currentUser;\n} // Loads chat messages history and listens for upcoming ones.\n\n\nfunction loadMessages() {\n  // Loads the last 12 messages and listen for new ones.\n  var callback = function callback(snap) {\n    var data = snap.val();\n    displayMessage(snap.key, data.name, data.text, data.profilePicUrl, data.imageUrl, data.date, data.time);\n  };\n\n  firebase.database().ref('/messages/').on('child_added', callback);\n  firebase.database().ref('/messages/').on('child_changed', callback);\n} // Saves a new message on the Firebase DB.\n\n\nfunction saveMessage(messageText) {\n  // Add a new message entry to the Firebase database.\n  var date = new Date(Date.now());\n  return firebase.database().ref('/messages/').push({\n    name: getUserName(),\n    text: messageText,\n    profilePicUrl: getProfilePicUrl(),\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString()\n  }).catch(function (error) {\n    console.error('Error writing new message to Firebase Database', error);\n  });\n} // Saves a new message containing an image in Firebase.\n// This first saves the image in Firebase storage.\n\n\nfunction saveImageMessage(file) {\n  // 1 - We add a message with a loading icon that will get updated with the shared image.\n  var date = new Date(Date.now());\n  firebase.database().ref('/messages/').push({\n    name: getUserName(),\n    imageUrl: LOADING_IMAGE_URL,\n    profilePicUrl: getProfilePicUrl(),\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString()\n  }).then(function (messageRef) {\n    // 2 - Upload the image to Cloud Storage.\n    var filePath = firebase.auth().currentUser.uid + '/' + messageRef.key + '/' + file.name;\n    return firebase.storage().ref(filePath).put(file).then(function (fileSnapshot) {\n      // 3 - Generate a public URL for the file.\n      return fileSnapshot.ref.getDownloadURL().then(function (url) {\n        // 4 - Update the chat message placeholder with the imageâ€™s URL.\n        return messageRef.update({\n          imageUrl: url,\n          storageUri: fileSnapshot.metadata.fullPath\n        });\n      });\n    });\n  }).catch(function (error) {\n    console.error('There was an error uploading a file to Cloud Storage:', error);\n  });\n} // Saves the messaging device token to the datastore.\n\n\nfunction saveMessagingDeviceToken() {\n  firebase.messaging().getToken().then(function (currentToken) {\n    if (currentToken) {\n      console.log('Got FCM device token:', currentToken); // Saving the Device Token to the datastore.\n\n      firebase.database().ref('/fcmTokens').child(currentToken).set(firebase.auth().currentUser.uid);\n    } else {\n      // Need to request permissions to show notifications.\n      requestNotificationsPermissions();\n    }\n  }).catch(function (error) {\n    console.error('Unable to get messaging token.', error);\n  });\n} // Requests permissions to show notifications.\n\n\nfunction requestNotificationsPermissions() {\n  console.log('Requesting notifications permission...');\n  firebase.messaging().requestPermission().then(function () {\n    // Notification permission granted.\n    saveMessagingDeviceToken();\n  }).catch(function (error) {\n    console.error('Unable to get permission to notify.', error);\n  });\n} // Triggered when a file is selected via the media picker.\n\n\nfunction onMediaFileSelected(event) {\n  event.preventDefault();\n  var file = event.target.files[0]; // Clear the selection in the file picker input.\n\n  imageFormElement.reset(); // Check if the file is an image.\n\n  if (!file.type.match('image.*')) {\n    var data = {\n      message: 'You can only send images',\n      timeout: 2000\n    };\n    signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\n    return;\n  } // Check if the user is signed-in\n\n\n  if (checkSignedInWithMessage()) {\n    saveImageMessage(file);\n  }\n} // Triggered when the send new message form is submitted.\n\n\nfunction onMessageFormSubmit(e) {\n  e.preventDefault(); // Check that the user entered a message and is signed in.\n\n  if (messageInputElement.value && checkSignedInWithMessage()) {\n    saveMessage(messageInputElement.value).then(function () {\n      // Clear message text field and re-enable the SEND button.\n      resetMaterialTextfield(messageInputElement);\n      toggleButton();\n    });\n  }\n} // Triggers when the auth state change for instance when the user signs-in or signs-out.\n\n\nfunction authStateObserver(user) {\n  if (user) {\n    // User is signed in!\n    // Get the signed-in user's profile pic and name.\n    var profilePicUrl = getProfilePicUrl();\n    var userName = getUserName(); // Set the user's profile pic and name.\n\n    userPicElement.style.backgroundImage = 'url(' + profilePicUrl + ')';\n    userNameElement.textContent = userName; // Show user's profile and sign-out button.\n\n    userNameElement.removeAttribute('hidden');\n    userPicElement.removeAttribute('hidden');\n    signOutButtonElement.removeAttribute('hidden'); // Hide sign-in button.\n\n    signInButtonElement.setAttribute('hidden', 'true'); // We save the Firebase Messaging Device token and enable notifications.\n\n    saveMessagingDeviceToken();\n  } else {\n    // User is signed out!\n    // Hide user's profile and sign-out button.\n    userNameElement.setAttribute('hidden', 'true');\n    userPicElement.setAttribute('hidden', 'true');\n    signOutButtonElement.setAttribute('hidden', 'true'); // Show sign-in button.\n\n    signInButtonElement.removeAttribute('hidden');\n  }\n} // Returns true if user is signed-in. Otherwise false and displays a message.\n\n\nfunction checkSignedInWithMessage() {\n  // Return true if the user is signed in Firebase\n  if (isUserSignedIn()) {\n    return true;\n  } // Display a message to the user using a Toast.\n\n\n  var data = {\n    message: 'You must sign-in first',\n    timeout: 2000\n  };\n  signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\n  return false;\n} // Resets the given MaterialTextField.\n\n\nfunction resetMaterialTextfield(element) {\n  element.value = '';\n  element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\n} // Template for messages.\n\n\nvar MESSAGE_TEMPLATE = '<div class=\"message-container\">' + '<div class=\"spacing\"><div class=\"pic\"></div></div>' + '<div class=\"message\"></div>' + '<div class=\"nameDateTime\"></div>';\n'</div>'; // Adds a size to Google Profile pics URLs.\n\nfunction addSizeToGoogleProfilePic(url) {\n  if (url.indexOf('googleusercontent.com') !== -1 && url.indexOf('?') === -1) {\n    return url + '?sz=150';\n  }\n\n  return url;\n} // A loading image URL.\n\n\nvar LOADING_IMAGE_URL = './assets/loader.gif'; // Displays a Message in the UI.\n\nfunction displayMessage(key, name, text, picUrl, imageUrl, date, time) {\n  var div = document.getElementById(key); // If an element for that message does not exists yet we create it.\n\n  if (!div) {\n    var container = document.createElement('div');\n    container.innerHTML = MESSAGE_TEMPLATE;\n    div = container.firstChild;\n    div.setAttribute('id', key);\n    messageListElement.appendChild(div);\n  }\n\n  if (picUrl) {\n    div.querySelector('.pic').style.backgroundImage = 'url(' + addSizeToGoogleProfilePic(picUrl) + ')';\n  }\n\n  div.querySelector('.nameDateTime').textContent = name + \" sent this on \" + date + \" at \" + time;\n  var messageElement = div.querySelector('.message');\n\n  if (text) {\n    // If the message is text.\n    messageElement.textContent = text; // Replace all line breaks by <br>.\n\n    messageElement.innerHTML = messageElement.innerHTML.replace(/\\n/g, '<br>');\n  } else if (imageUrl) {\n    // If the message is an image.\n    var image = document.createElement('img');\n    image.addEventListener('load', function () {\n      messageListElement.scrollTop = messageListElement.scrollHeight;\n    });\n    image.src = imageUrl + '&' + new Date().getTime();\n    messageElement.innerHTML = '';\n    messageElement.appendChild(image);\n  } // Show the card fading-in and scroll to view the new message.\n\n\n  setTimeout(function () {\n    div.classList.add('visible');\n  }, 1);\n  messageListElement.scrollTop = messageListElement.scrollHeight;\n  messageInputElement.focus();\n} // Enables or disables the submit button depending on the values of the input\n// fields.\n\n\nfunction toggleButton() {\n  if (messageInputElement.value) {\n    submitButtonElement.removeAttribute('disabled');\n  } else {\n    submitButtonElement.setAttribute('disabled', 'true');\n  }\n} // Checks that the Firebase SDK has been correctly setup and configured.\n\n\nfunction checkSetup() {\n  if (!window.firebase || !(firebase.app instanceof Function) || !firebase.app().options) {\n    window.alert('You have not configured and imported the Firebase SDK. ' + 'Make sure you go through the codelab setup instructions and make ' + 'sure you are running the codelab using `firebase serve`');\n  }\n} // Checks that Firebase has been imported.\n\n\ncheckSetup(); // Shortcuts to DOM Elements.\n\nvar messageListElement = document.getElementById('messages');\nvar messageFormElement = document.getElementById('message-form');\nvar messageInputElement = document.getElementById('message');\nvar submitButtonElement = document.getElementById('submit');\nvar imageButtonElement = document.getElementById('submitImage');\nvar imageFormElement = document.getElementById('image-form');\nvar mediaCaptureElement = document.getElementById('mediaCapture');\nvar userPicElement = document.getElementById('user-pic');\nvar userNameElement = document.getElementById('user-name');\nvar signInButtonElement = document.getElementById('sign-in');\nvar signOutButtonElement = document.getElementById('sign-out');\nvar signInSnackbarElement = document.getElementById('must-signin-snackbar'); // Saves message on form submit.\n\nmessageFormElement.addEventListener('submit', onMessageFormSubmit);\nsignOutButtonElement.addEventListener('click', signOut);\nsignInButtonElement.addEventListener('click', signIn); // Toggle for the button.\n\nmessageInputElement.addEventListener('keyup', toggleButton);\nmessageInputElement.addEventListener('change', toggleButton); // Events for image upload.\n\nimageButtonElement.addEventListener('click', function (e) {\n  e.preventDefault();\n  mediaCaptureElement.click();\n});\nmediaCaptureElement.addEventListener('change', onMediaFileSelected); // initialize Firebase\n\ninitFirebaseAuth(); // We load currently existing chat messages and listen to new ones.\n\nloadMessages();",{"version":3,"sources":["C:\\Users\\aidan\\Dev\\paradigm-vue\\src\\views\\chat.js"],"names":["signIn","provider","firebase","auth","GoogleAuthProvider","signInWithPopup","signOut","initFirebaseAuth","onAuthStateChanged","authStateObserver","getProfilePicUrl","currentUser","photoURL","getUserName","displayName","isUserSignedIn","loadMessages","callback","snap","data","val","displayMessage","key","name","text","profilePicUrl","imageUrl","date","time","database","ref","on","saveMessage","messageText","Date","now","push","toLocaleDateString","toLocaleTimeString","catch","error","console","saveImageMessage","file","LOADING_IMAGE_URL","then","messageRef","filePath","uid","storage","put","fileSnapshot","getDownloadURL","url","update","storageUri","metadata","fullPath","saveMessagingDeviceToken","messaging","getToken","currentToken","log","child","set","requestNotificationsPermissions","requestPermission","onMediaFileSelected","event","preventDefault","target","files","imageFormElement","reset","type","match","message","timeout","signInSnackbarElement","MaterialSnackbar","showSnackbar","checkSignedInWithMessage","onMessageFormSubmit","e","messageInputElement","value","resetMaterialTextfield","toggleButton","user","userName","userPicElement","style","backgroundImage","userNameElement","textContent","removeAttribute","signOutButtonElement","signInButtonElement","setAttribute","element","parentNode","MaterialTextfield","boundUpdateClassesHandler","MESSAGE_TEMPLATE","addSizeToGoogleProfilePic","indexOf","picUrl","div","document","getElementById","container","createElement","innerHTML","firstChild","messageListElement","appendChild","querySelector","messageElement","replace","image","addEventListener","scrollTop","scrollHeight","src","getTime","setTimeout","classList","add","focus","submitButtonElement","checkSetup","window","app","Function","options","alert","messageFormElement","imageButtonElement","mediaCaptureElement","click"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n// Signs-in Friendly Chat.\r\nfunction signIn() {\r\n  // Sign in Firebase using popup auth and Google as the identity provider.\r\n  var provider = new firebase.auth.GoogleAuthProvider();\r\n  firebase.auth().signInWithPopup(provider);\r\n}\r\n\r\n// Signs-out of Friendly Chat.\r\nfunction signOut() {\r\n  // Sign out of Firebase.\r\n  firebase.auth().signOut();\r\n}\r\n\r\n// Initiate firebase auth.\r\nfunction initFirebaseAuth() {\r\n  // Listen to auth state changes.\r\n  firebase.auth().onAuthStateChanged(authStateObserver);\r\n}\r\n\r\n// Returns the signed-in user's profile Pic URL.\r\nfunction getProfilePicUrl() {\r\n  return firebase.auth().currentUser.photoURL || '/assets/profile_placeholder.png';\r\n}\r\n\r\n// Returns the signed-in user's display name.\r\nfunction getUserName() {\r\n  return firebase.auth().currentUser.displayName;\r\n}\r\n\r\n// Returns true if a user is signed-in.\r\nfunction isUserSignedIn() {\r\n  return !!firebase.auth().currentUser;\r\n}\r\n\r\n// Loads chat messages history and listens for upcoming ones.\r\nfunction loadMessages() {\r\n  // Loads the last 12 messages and listen for new ones.\r\n  var callback = function(snap) {\r\n    var data = snap.val();\r\n    displayMessage(snap.key, data.name, data.text, data.profilePicUrl, data.imageUrl, data.date, data.time);\r\n  };\r\n\r\n  firebase.database().ref('/messages/').on('child_added', callback);\r\n  firebase.database().ref('/messages/').on('child_changed', callback);\r\n}\r\n\r\n// Saves a new message on the Firebase DB.\r\nfunction saveMessage(messageText) {\r\n  // Add a new message entry to the Firebase database.\r\n  var date = new Date(Date.now())\r\n  return firebase.database().ref('/messages/').push({\r\n    name: getUserName(),\r\n    text: messageText,\r\n    profilePicUrl: getProfilePicUrl(),\r\n    date: date.toLocaleDateString(),\r\n    time: date.toLocaleTimeString()\r\n  }).catch(function(error) {\r\n    console.error('Error writing new message to Firebase Database', error);\r\n  });\r\n}\r\n\r\n// Saves a new message containing an image in Firebase.\r\n// This first saves the image in Firebase storage.\r\nfunction saveImageMessage(file) {\r\n  // 1 - We add a message with a loading icon that will get updated with the shared image.\r\n  var date = new Date(Date.now())\r\n  firebase.database().ref('/messages/').push({\r\n    name: getUserName(),\r\n    imageUrl: LOADING_IMAGE_URL,\r\n    profilePicUrl: getProfilePicUrl(),\r\n    date: date.toLocaleDateString(),\r\n    time: date.toLocaleTimeString()\r\n  }).then(function(messageRef) {\r\n    // 2 - Upload the image to Cloud Storage.\r\n    var filePath = firebase.auth().currentUser.uid + '/' + messageRef.key + '/' + file.name;\r\n    return firebase.storage().ref(filePath).put(file).then(function(fileSnapshot) {\r\n      // 3 - Generate a public URL for the file.\r\n      return fileSnapshot.ref.getDownloadURL().then((url) => {\r\n        // 4 - Update the chat message placeholder with the imageâ€™s URL.\r\n        return messageRef.update({\r\n          imageUrl: url,\r\n          storageUri: fileSnapshot.metadata.fullPath\r\n        });\r\n      });\r\n    });\r\n  }).catch(function(error) {\r\n    console.error('There was an error uploading a file to Cloud Storage:', error);\r\n  });\r\n}\r\n\r\n// Saves the messaging device token to the datastore.\r\nfunction saveMessagingDeviceToken() {\r\n  firebase.messaging().getToken().then(function(currentToken) {\r\n    if (currentToken) {\r\n      console.log('Got FCM device token:', currentToken);\r\n      // Saving the Device Token to the datastore.\r\n      firebase.database().ref('/fcmTokens').child(currentToken)\r\n          .set(firebase.auth().currentUser.uid);\r\n    } else {\r\n      // Need to request permissions to show notifications.\r\n      requestNotificationsPermissions();\r\n    }\r\n  }).catch(function(error){\r\n    console.error('Unable to get messaging token.', error);\r\n  });\r\n}\r\n\r\n// Requests permissions to show notifications.\r\nfunction requestNotificationsPermissions() {\r\n  console.log('Requesting notifications permission...');\r\n  firebase.messaging().requestPermission().then(function() {\r\n    // Notification permission granted.\r\n    saveMessagingDeviceToken();\r\n  }).catch(function(error) {\r\n    console.error('Unable to get permission to notify.', error);\r\n  });\r\n}\r\n\r\n// Triggered when a file is selected via the media picker.\r\nfunction onMediaFileSelected(event) {\r\n  event.preventDefault();\r\n  var file = event.target.files[0];\r\n\r\n  // Clear the selection in the file picker input.\r\n  imageFormElement.reset();\r\n\r\n  // Check if the file is an image.\r\n  if (!file.type.match('image.*')) {\r\n    var data = {\r\n      message: 'You can only send images',\r\n      timeout: 2000\r\n    };\r\n    signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\r\n    return;\r\n  }\r\n  // Check if the user is signed-in\r\n  if (checkSignedInWithMessage()) {\r\n    saveImageMessage(file);\r\n  }\r\n}\r\n\r\n// Triggered when the send new message form is submitted.\r\nfunction onMessageFormSubmit(e) {\r\n  e.preventDefault();\r\n  // Check that the user entered a message and is signed in.\r\n  if (messageInputElement.value && checkSignedInWithMessage()) {\r\n    saveMessage(messageInputElement.value).then(function() {\r\n      // Clear message text field and re-enable the SEND button.\r\n      resetMaterialTextfield(messageInputElement);\r\n      toggleButton();\r\n    });\r\n  }\r\n}\r\n\r\n// Triggers when the auth state change for instance when the user signs-in or signs-out.\r\nfunction authStateObserver(user) {\r\n  if (user) { // User is signed in!\r\n    // Get the signed-in user's profile pic and name.\r\n    var profilePicUrl = getProfilePicUrl();\r\n    var userName = getUserName();\r\n\r\n    // Set the user's profile pic and name.\r\n    userPicElement.style.backgroundImage = 'url(' + profilePicUrl + ')';\r\n    userNameElement.textContent = userName;\r\n\r\n    // Show user's profile and sign-out button.\r\n    userNameElement.removeAttribute('hidden');\r\n    userPicElement.removeAttribute('hidden');\r\n    signOutButtonElement.removeAttribute('hidden');\r\n\r\n    // Hide sign-in button.\r\n    signInButtonElement.setAttribute('hidden', 'true');\r\n\r\n    // We save the Firebase Messaging Device token and enable notifications.\r\n    saveMessagingDeviceToken();\r\n  } else { // User is signed out!\r\n    // Hide user's profile and sign-out button.\r\n    userNameElement.setAttribute('hidden', 'true');\r\n    userPicElement.setAttribute('hidden', 'true');\r\n    signOutButtonElement.setAttribute('hidden', 'true');\r\n\r\n    // Show sign-in button.\r\n    signInButtonElement.removeAttribute('hidden');\r\n  }\r\n}\r\n\r\n// Returns true if user is signed-in. Otherwise false and displays a message.\r\nfunction checkSignedInWithMessage() {\r\n  // Return true if the user is signed in Firebase\r\n  if (isUserSignedIn()) {\r\n    return true;\r\n  }\r\n\r\n  // Display a message to the user using a Toast.\r\n  var data = {\r\n    message: 'You must sign-in first',\r\n    timeout: 2000\r\n  };\r\n  signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\r\n  return false;\r\n}\r\n\r\n// Resets the given MaterialTextField.\r\nfunction resetMaterialTextfield(element) {\r\n  element.value = '';\r\n  element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\r\n}\r\n\r\n// Template for messages.\r\nvar MESSAGE_TEMPLATE =\r\n    '<div class=\"message-container\">' +\r\n      '<div class=\"spacing\"><div class=\"pic\"></div></div>' +\r\n      '<div class=\"message\"></div>' +\r\n      '<div class=\"nameDateTime\"></div>'\r\n    '</div>';\r\n\r\n// Adds a size to Google Profile pics URLs.\r\nfunction addSizeToGoogleProfilePic(url) {\r\n  if (url.indexOf('googleusercontent.com') !== -1 && url.indexOf('?') === -1) {\r\n    return url + '?sz=150';\r\n  }\r\n  return url;\r\n}\r\n\r\n// A loading image URL.\r\nvar LOADING_IMAGE_URL = './assets/loader.gif';\r\n\r\n// Displays a Message in the UI.\r\nfunction displayMessage(key, name, text, picUrl, imageUrl, date, time) {\r\n  var div = document.getElementById(key);\r\n  // If an element for that message does not exists yet we create it.\r\n  if (!div) {\r\n    var container = document.createElement('div');\r\n    container.innerHTML = MESSAGE_TEMPLATE;\r\n    div = container.firstChild;\r\n    div.setAttribute('id', key);\r\n    messageListElement.appendChild(div);\r\n  }\r\n  if (picUrl) {\r\n    div.querySelector('.pic').style.backgroundImage = 'url(' + addSizeToGoogleProfilePic(picUrl) + ')';\r\n  }\r\n  div.querySelector('.nameDateTime').textContent = name + \" sent this on \" + date + \" at \" + time;\r\n  var messageElement = div.querySelector('.message');\r\n  if (text) { // If the message is text.\r\n    messageElement.textContent = text;\r\n    // Replace all line breaks by <br>.\r\n    messageElement.innerHTML = messageElement.innerHTML.replace(/\\n/g, '<br>');\r\n  } else if (imageUrl) { // If the message is an image.\r\n    var image = document.createElement('img');\r\n    image.addEventListener('load', function() {\r\n      messageListElement.scrollTop = messageListElement.scrollHeight;\r\n    });\r\n    image.src = imageUrl + '&' + new Date().getTime();\r\n    messageElement.innerHTML = '';\r\n    messageElement.appendChild(image);\r\n  }\r\n  // Show the card fading-in and scroll to view the new message.\r\n  setTimeout(function() {div.classList.add('visible')}, 1);\r\n  messageListElement.scrollTop = messageListElement.scrollHeight;\r\n  messageInputElement.focus();\r\n}\r\n\r\n// Enables or disables the submit button depending on the values of the input\r\n// fields.\r\nfunction toggleButton() {\r\n  if (messageInputElement.value) {\r\n    submitButtonElement.removeAttribute('disabled');\r\n  } else {\r\n    submitButtonElement.setAttribute('disabled', 'true');\r\n  }\r\n}\r\n\r\n// Checks that the Firebase SDK has been correctly setup and configured.\r\nfunction checkSetup() {\r\n  if (!window.firebase || !(firebase.app instanceof Function) || !firebase.app().options) {\r\n    window.alert('You have not configured and imported the Firebase SDK. ' +\r\n        'Make sure you go through the codelab setup instructions and make ' +\r\n        'sure you are running the codelab using `firebase serve`');\r\n  }\r\n}\r\n\r\n// Checks that Firebase has been imported.\r\ncheckSetup();\r\n\r\n// Shortcuts to DOM Elements.\r\nvar messageListElement = document.getElementById('messages');\r\nvar messageFormElement = document.getElementById('message-form');\r\nvar messageInputElement = document.getElementById('message');\r\nvar submitButtonElement = document.getElementById('submit');\r\nvar imageButtonElement = document.getElementById('submitImage');\r\nvar imageFormElement = document.getElementById('image-form');\r\nvar mediaCaptureElement = document.getElementById('mediaCapture');\r\nvar userPicElement = document.getElementById('user-pic');\r\nvar userNameElement = document.getElementById('user-name');\r\nvar signInButtonElement = document.getElementById('sign-in');\r\nvar signOutButtonElement = document.getElementById('sign-out');\r\nvar signInSnackbarElement = document.getElementById('must-signin-snackbar');\r\n\r\n// Saves message on form submit.\r\nmessageFormElement.addEventListener('submit', onMessageFormSubmit);\r\nsignOutButtonElement.addEventListener('click', signOut);\r\nsignInButtonElement.addEventListener('click', signIn);\r\n\r\n// Toggle for the button.\r\nmessageInputElement.addEventListener('keyup', toggleButton);\r\nmessageInputElement.addEventListener('change', toggleButton);\r\n\r\n// Events for image upload.\r\nimageButtonElement.addEventListener('click', function(e) {\r\n  e.preventDefault();\r\n  mediaCaptureElement.click();\r\n});\r\nmediaCaptureElement.addEventListener('change', onMediaFileSelected);\r\n\r\n// initialize Firebase\r\ninitFirebaseAuth();\r\n\r\n// We load currently existing chat messages and listen to new ones.\r\nloadMessages();\r\n"]}]}